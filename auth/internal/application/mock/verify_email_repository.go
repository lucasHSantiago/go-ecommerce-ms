// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucasHSantiago/go-ecommerce-ms/auth/internal/application (interfaces: VerifyEmailRepository)

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/lucasHSantiago/go-ecommerce-ms/auth/internal/domain"
	infra "github.com/lucasHSantiago/go-ecommerce-ms/auth/internal/infra"
)

// MockVerifyEmailRepository is a mock of VerifyEmailRepository interface.
type MockVerifyEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyEmailRepositoryMockRecorder
}

// MockVerifyEmailRepositoryMockRecorder is the mock recorder for MockVerifyEmailRepository.
type MockVerifyEmailRepositoryMockRecorder struct {
	mock *MockVerifyEmailRepository
}

// NewMockVerifyEmailRepository creates a new mock instance.
func NewMockVerifyEmailRepository(ctrl *gomock.Controller) *MockVerifyEmailRepository {
	mock := &MockVerifyEmailRepository{ctrl: ctrl}
	mock.recorder = &MockVerifyEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyEmailRepository) EXPECT() *MockVerifyEmailRepositoryMockRecorder {
	return m.recorder
}

// CreateVerifyEmail mocks base method.
func (m *MockVerifyEmailRepository) CreateVerifyEmail(arg0 context.Context, arg1 infra.CreateVerifyEmail) (*domain.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(*domain.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockVerifyEmailRepositoryMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockVerifyEmailRepository)(nil).CreateVerifyEmail), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockVerifyEmailRepository) UpdateVerifyEmail(arg0 context.Context, arg1 infra.UpdateVerifyEmail) (*domain.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(*domain.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockVerifyEmailRepositoryMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockVerifyEmailRepository)(nil).UpdateVerifyEmail), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockVerifyEmailRepository) VerifyEmailTx(arg0 context.Context, arg1 infra.VerifyEmailTx) (infra.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(infra.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockVerifyEmailRepositoryMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockVerifyEmailRepository)(nil).VerifyEmailTx), arg0, arg1)
}
